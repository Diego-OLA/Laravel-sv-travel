1. Deshabilitar una fecha especÃ­fica
Para deshabilitar una fecha en PrimeVue DatePicker, usamos la propiedad disabledDates.

âœ… Ejemplo - Deshabilitar una fecha especÃ­fica
vue
Copiar
Editar
<template>
  <DatePicker v-model="date" inline :disabledDates="disabledDates" />
</template>

<script setup>
import { ref } from "vue";

const date = ref(null);
const disabledDates = ref([
  new Date(2025, 3, 15) // 15 de abril de 2025 (mes - 1 porque en JS los meses van de 0 a 11)
]);
</script>
ğŸ”¹ ExplicaciÃ³n:

La fecha "2025-04-15" se convierte en new Date(2025, 3, 15), ya que en JavaScript abril es el mes 3.
disabledDates recibe un array de fechas deshabilitadas.
ğŸ“Œ 2. Convertir fechas de una API para deshabilitarlas
Si las fechas vienen de una API en formato "YYYY-MM-DD", necesitamos convertirlas correctamente.

âœ… Ejemplo - Convertir fechas de API
js
Copiar
Editar
const rawDates = ["2025-04-15", "2025-04-20"]; // Fechas de API

const disabledDates = ref(rawDates.map(fecha => {
  const parts = fecha.split("-"); // ["2025", "04", "15"]
  return new Date(parts[0], parts[1] - 1, parts[2]); // Convertir correctamente
}));
ğŸ”¹ ExplicaciÃ³n:

Dividimos la fecha "YYYY-MM-DD" en un array (split("-")).
Restamos 1 al mes porque JavaScript usa meses de 0-11.
Convertimos a Date para que DatePicker lo entienda.
ğŸ“Œ 3. Deshabilitar un rango de fechas
Si queremos deshabilitar un intervalo de fechas, recorremos desde fecha_entrada hasta fecha_salida.

âœ… Ejemplo - Deshabilitar un rango de fechas
vue
Copiar
Editar
<template>
  <DatePicker v-model="date" inline :disabledDates="disabledDates" />
</template>

<script setup>
import { ref, onMounted } from "vue";

const date = ref(null);
const disabledDates = ref([]);

// SimulaciÃ³n de datos de la API
const calendarReserved = [
  { fecha_entrada: "2025-04-10", fecha_salida: "2025-04-15" },
  { fecha_entrada: "2025-04-20", fecha_salida: "2025-04-25" }
];

const generateDisabledDates = () => {
  let allDisabledDates = [];

  calendarReserved.forEach(reservation => {
    let startDate = new Date(Date.UTC(
      ...reservation.fecha_entrada.split("-").map((v, i) => (i === 1 ? v - 1 : v))
    ));

    let endDate = new Date(Date.UTC(
      ...reservation.fecha_salida.split("-").map((v, i) => (i === 1 ? v - 1 : v))
    ));

    while (startDate <= endDate) {
      allDisabledDates.push(new Date(startDate)); // Guardamos la fecha
      startDate.setDate(startDate.getDate() + 1); // Avanzamos un dÃ­a
    }
  });

  disabledDates.value = allDisabledDates;
};

// Llamamos a la funciÃ³n al montar el componente
onMounted(generateDisabledDates);
</script>
ğŸ”¹ ExplicaciÃ³n:

Convertimos fecha_entrada y fecha_salida a fechas vÃ¡lidas en JS usando Date.UTC().
Recorremos cada dÃ­a en el rango (while (startDate <= endDate)) y los agregamos a disabledDates.
Al usar onMounted(), generamos las fechas deshabilitadas al cargar el componente.
ğŸ“Œ 4. Solucionar el problema del dÃ­a adelantado/atrasado
Si las fechas aparecen un dÃ­a antes o despuÃ©s, el problema es la zona horaria.

âœ… SoluciÃ³n: Crear fechas en UTC
js
Copiar
Editar
let startDate = new Date(Date.UTC(
  ...reservation.fecha_entrada.split("-").map((v, i) => (i === 1 ? v - 1 : v))
));

let endDate = new Date(Date.UTC(
  ...reservation.fecha_salida.split("-").map((v, i) => (i === 1 ? v - 1 : v))
));
ğŸ”¹ ExplicaciÃ³n:

Date.UTC(aÃ±o, mes, dÃ­a) crea la fecha sin ajustes de zona horaria.
AsÃ­ evitamos que JavaScript adelante o atrase el dÃ­a por diferencias horarias.
ğŸ“Œ 5. Personalizar la apariencia de fechas deshabilitadas
Si ademÃ¡s de deshabilitar quieres tacharlas y ponerlas en rojo, puedes usar la ranura #date.

âœ… Ejemplo - Tachado y rojo en fechas reservadas
vue
Copiar
Editar
<template>
  <DatePicker v-model="date" inline>
    <template #date="slotProps">
      <span
        :style="isReserved(slotProps.date) ? 'text-decoration: line-through; color: red' : ''"
      >
        {{ slotProps.date.day }}
      </span>
    </template>
  </DatePicker>
</template>

<script setup>
import { ref, onMounted } from "vue";

const date = ref(null);
const reservedDates = ref([]);

// SimulaciÃ³n de datos de la API
const calendarReserved = [
  { fecha_entrada: "2025-04-10", fecha_salida: "2025-04-15" },
  { fecha_entrada: "2025-04-20", fecha_salida: "2025-04-25" }
];

const generateReservedDates = () => {
  let allReservedDates = [];

  calendarReserved.forEach(reservation => {
    let startDate = new Date(Date.UTC(
      ...reservation.fecha_entrada.split("-").map((v, i) => (i === 1 ? v - 1 : v))
    ));

    let endDate = new Date(Date.UTC(
      ...reservation.fecha_salida.split("-").map((v, i) => (i === 1 ? v - 1 : v))
    ));

    while (startDate <= endDate) {
      allReservedDates.push(new Date(startDate));
      startDate.setDate(startDate.getDate() + 1);
    }
  });

  reservedDates.value = allReservedDates;
};

const isReserved = (date) => {
  return reservedDates.value.some(reservedDate => 
    reservedDate.getFullYear() === date.year &&
    reservedDate.getMonth() === date.month &&
    reservedDate.getDate() === date.day
  );
};

onMounted(generateReservedDates);
</script>
ğŸ”¹ ExplicaciÃ³n:

Usamos #date="slotProps" para modificar cÃ³mo se muestra cada fecha.
isReserved(slotProps.date) verifica si la fecha estÃ¡ reservada.
Si es reservada, le agregamos text-decoration: line-through; color: red.
ğŸ“Œ ConclusiÃ³n
âœ” Para deshabilitar fechas: Usa :disabledDates="arrayDeFechas".
âœ” Para manejar fechas de API: Convierte "YYYY-MM-DD" a new Date(YYYY, MM-1, DD).
âœ” Para deshabilitar rangos: Recorre desde fecha_entrada hasta fecha_salida.
âœ” Para evitar dÃ­as incorrectos: Usa Date.UTC().
âœ” Para tachar y poner rojo: Usa #date con estilos personalizados.
